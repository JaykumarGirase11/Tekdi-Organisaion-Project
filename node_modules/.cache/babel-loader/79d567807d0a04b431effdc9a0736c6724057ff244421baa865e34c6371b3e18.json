{"ast":null,"code":"// Mock ODK data\nconst generateMockData = () => {\n  const locations = ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Kolkata'];\n  const answers = ['Yes', 'No', 'Maybe', 'Not Applicable'];\n  const totalSubmissions = 156;\n  const activeUsers = 23;\n\n  // Generate raw data\n  const rawData = Array.from({\n    length: totalSubmissions\n  }, (_, i) => ({\n    id: i + 1,\n    user: `User ${Math.floor(Math.random() * activeUsers) + 1}`,\n    location: locations[Math.floor(Math.random() * locations.length)],\n    submission_date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    answer: answers[Math.floor(Math.random() * answers.length)],\n    notes: `Sample note ${i + 1}`\n  }));\n\n  // Calculate location data\n  const locationCounts = locations.reduce((acc, location) => {\n    acc[location] = rawData.filter(item => item.location === location).length;\n    return acc;\n  }, {});\n\n  // Calculate answer distribution\n  const answerCounts = answers.reduce((acc, answer) => {\n    acc[answer] = rawData.filter(item => item.answer === answer).length;\n    return acc;\n  }, {});\n\n  // Find top location\n  const topLocation = Object.entries(locationCounts).sort(([, a], [, b]) => b - a)[0][0];\n  return {\n    totalSubmissions,\n    activeUsers,\n    topLocation,\n    locationData: {\n      labels: locations,\n      values: locations.map(location => locationCounts[location])\n    },\n    answerDistribution: {\n      labels: answers,\n      values: answers.map(answer => answerCounts[answer])\n    },\n    rawData\n  };\n};\nexport const fetchODKData = async () => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Simulate random errors (10% chance)\n  if (Math.random() < 0.1) {\n    throw new Error('Failed to fetch data');\n  }\n  return generateMockData();\n};","map":{"version":3,"names":["generateMockData","locations","answers","totalSubmissions","activeUsers","rawData","Array","from","length","_","i","id","user","Math","floor","random","location","submission_date","Date","now","toISOString","split","answer","notes","locationCounts","reduce","acc","filter","item","answerCounts","topLocation","Object","entries","sort","a","b","locationData","labels","values","map","answerDistribution","fetchODKData","Promise","resolve","setTimeout","Error"],"sources":["C:/Users/jayku/OneDrive/Desktop/tekdi organisaion project/src/services/api.js"],"sourcesContent":["// Mock ODK data\r\nconst generateMockData = () => {\r\n  const locations = ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Kolkata'];\r\n  const answers = ['Yes', 'No', 'Maybe', 'Not Applicable'];\r\n  const totalSubmissions = 156;\r\n  const activeUsers = 23;\r\n\r\n  // Generate raw data\r\n  const rawData = Array.from({ length: totalSubmissions }, (_, i) => ({\r\n    id: i + 1,\r\n    user: `User ${Math.floor(Math.random() * activeUsers) + 1}`,\r\n    location: locations[Math.floor(Math.random() * locations.length)],\r\n    submission_date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\r\n    answer: answers[Math.floor(Math.random() * answers.length)],\r\n    notes: `Sample note ${i + 1}`,\r\n  }));\r\n\r\n  // Calculate location data\r\n  const locationCounts = locations.reduce((acc, location) => {\r\n    acc[location] = rawData.filter(item => item.location === location).length;\r\n    return acc;\r\n  }, {});\r\n\r\n  // Calculate answer distribution\r\n  const answerCounts = answers.reduce((acc, answer) => {\r\n    acc[answer] = rawData.filter(item => item.answer === answer).length;\r\n    return acc;\r\n  }, {});\r\n\r\n  // Find top location\r\n  const topLocation = Object.entries(locationCounts)\r\n    .sort(([, a], [, b]) => b - a)[0][0];\r\n\r\n  return {\r\n    totalSubmissions,\r\n    activeUsers,\r\n    topLocation,\r\n    locationData: {\r\n      labels: locations,\r\n      values: locations.map(location => locationCounts[location]),\r\n    },\r\n    answerDistribution: {\r\n      labels: answers,\r\n      values: answers.map(answer => answerCounts[answer]),\r\n    },\r\n    rawData,\r\n  };\r\n};\r\n\r\nexport const fetchODKData = async () => {\r\n  // Simulate API delay\r\n  await new Promise((resolve) => setTimeout(resolve, 1000));\r\n  \r\n  // Simulate random errors (10% chance)\r\n  if (Math.random() < 0.1) {\r\n    throw new Error('Failed to fetch data');\r\n  }\r\n\r\n  return generateMockData();\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}